<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true">
    <!--设置系统日志目录 -->
    <springProperty scop="context" name="applicationName" source="spring.application.name"/>
    <springProperty scop="context" name="logLevel" source="logging.level.web" defaultValue="INFO"/>
    <!-- LOG_PATH 读取的logging.file.path，可由容器云下发到环境中 -->
    <property scop="context" name="log.path" value="${LOG_PATH:-}"/>

    <!--
    统一的日志配置格式
    [%date] [%X{TenantCode}] [%X{AppCode}] [%X{BusinessCode}] [%thread] [%-5level] [%logger{50}] [%file:%line] - %msg%n
    -->
    <!--
        - log自带
        %d{yyyy-MM-dd HH:mm:ss} [%level] - %msg%n
        Logger: %logger
        Class: %class
        File: %file
        Caller: %caller
        Line: %line
        Message: %m
        Method: %M
        Relative: %relative
        Thread: %thread
        Exception: %ex
        xException: %xEx
        nopException: %nopex
        rException: %rEx
        Marker: %marker
        %n
        - 框架自定义，由 MDC.put(GlobalConstant.LOGTRACE_TRACEID, traceId) 设置
        %X{x-my-TraceID}
       -->
    <property name="log.layout.pattern"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} # %X{x-my-TraceID} # %thread # %-5level # %logger{80}:%L # %X{ip} # %msg%n"/>

    <!-- 控制台日志 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <layout className="">
            <!-- 常用的Pattern变量,大家可打开该pattern进行输出观察 -->
            <pattern>${log.layout.pattern}</pattern>
        </layout>
    </appender>

    <!-- 文件日志 -->
    <appender name="LOGSTASH" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${log.path}/app.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${log.path}/%d{yyyy-MM}/app.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>300MB</maxFileSize>
            <!--日志文档保留天数-->
            <maxHistory>2</maxHistory>
            <!-- 日志总保存量为10GB -->
            <totalSizeCap>5GB</totalSizeCap>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>

        <!-- 过滤掉traceId为空的日志 -->
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <evaluator class="ch.qos.logback.classic.boolex.JaninoEventEvaluator">
                <expression>
                    return ( (String)event.getMDCPropertyMap().get("x-my-TraceID") == null ||
                    ((String)event.getMDCPropertyMap().get("x-my-TraceID")).isEmpty() );
                </expression>
            </evaluator>
            <OnMismatch>NEUTRAL</OnMismatch>
            <OnMatch>DENY</OnMatch>
        </filter>

        <!--日志文档输出格式-->
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <pattern>
                    <pattern>
                        {
                        "date":"%d{yyyy-MM-dd HH:mm:ss.SSS}",
                        "serviceName": "${applicationName}",
                        "hostName":"%X{hostName}",
                        "traceId":"%X{x-my-TraceID}",
                        "thread": "%thread",
                        "level":"%level",
                        "logger":"%class:%line",
                        "message":"%message"
                        }
                    </pattern>
                </pattern>
                <stackTrace/>
            </providers>
        </encoder>
    </appender>

    <!-- 异步输出到控制台 -->
    <appender name="async-console" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>-1</discardingThreshold>
        <neverBlock>true</neverBlock>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>5120</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="console"/>
        <includeCallerData>true</includeCallerData>
    </appender>

    <!-- 异步输出到文件 -->
    <appender name="async-LOGSTASH" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>-1</discardingThreshold>
        <neverBlock>true</neverBlock>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>5120</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="LOGSTASH"/>
        <includeCallerData>true</includeCallerData>
    </appender>

    <!-- 日志级别 -->
    <root level="${logLevel}">
        <!--输出到控制台-->
        <appender-ref ref="async-console"/>
        <!--输出到日志文件-->
        <appender-ref ref="async-LOGSTASH"/>
    </root>

    <!-- 忽略特定URL的日志过滤器 -->
    <turboFilter class="ch.qos.logback.classic.turbo.MarkerFilter">
        <Marker>HEALTH_CHECK</Marker>
        <OnMatch>DENY</OnMatch>
    </turboFilter>

    <!-- 框架日志的打印范围 -->
    <logger name="org.springframework" level="INFO"/>
    <logger name="org.springframework.web" level="INFO"/>
    <logger name="org.springframework.beans" level="INFO"/>
    <logger name="org.apache" level="INFO"/>
    <logger name="jakarta.validation" level="INFO"/>
    <logger name="com.liuzd.soft.dao" level="debug"/>


</configuration>